<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神秘の博客</title>
  
  <subtitle>_(:3 」∠ )_</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-15T10:05:04.681Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SparkleMonkey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>删除链表的倒数第N个节点</title>
    <link href="http://yoursite.com/2018/11/13/leetcode%2019%20Remove%20Nth%20Node%20From%20End%20of%20List/"/>
    <id>http://yoursite.com/2018/11/13/leetcode 19 Remove Nth Node From End of List/</id>
    <published>2018-11-13T06:36:16.104Z</published>
    <updated>2018-11-15T10:05:04.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【leetcode-19】-删除链表的倒数第N个节点"><a href="#【leetcode-19】-删除链表的倒数第N个节点" class="headerlink" title="【leetcode 19】 删除链表的倒数第N个节点"></a>【leetcode 19】 删除链表的倒数第N个节点</h2><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><a id="more"></a><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.<br>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>给定的 n 保证是有效的。</p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>你能尝试使用一趟扫描实现吗？</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="/解决方法/"></a>/解决方法/</h2><h3 id="两趟扫描"><a href="#两趟扫描" class="headerlink" title="两趟扫描"></a>两趟扫描</h3><p>比较简单的想法即为，先遍历一遍链表，求出链表的长度，然后减去n，再第二次遍历进行删除即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    def removeNthFromEnd(self, head, n):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> n==0:</span><br><span class="line">            <span class="built_in">return</span> head</span><br><span class="line">        </span><br><span class="line">        num = 1</span><br><span class="line">        new_head = head</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> new_head.next:</span><br><span class="line">            num += 1</span><br><span class="line">            new_head = new_head.next</span><br><span class="line">               </span><br><span class="line">        <span class="keyword">if</span> num == n:</span><br><span class="line">            <span class="built_in">return</span> head.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_head = head </span><br><span class="line">            num = num-n-1</span><br><span class="line">            <span class="keyword">while</span> num &gt; 0:</span><br><span class="line">                new_head = new_head.next</span><br><span class="line">                num -= 1</span><br><span class="line">            new_head.next = new_head.next.next</span><br><span class="line">            <span class="built_in">return</span> head</span><br></pre></td></tr></table></figure><p>我在这里分情况进行了返回，因为考虑到删除头结点的情况。所以提前进行了判断，如果n等于链表的长度num，那么直接返回head.next即可。<br>不然的话，就扫描num-n-1，即将指针指向删除节点的前一个节点，然后进行操作。<br>这里我后期看了其他优秀的解答，比如说，直接给链表增加一个无意义的头结点，这样，就能把我上面的<br>两种情况一起算了，就不会像我这样麻烦。</p><h3 id="一趟扫描"><a href="#一趟扫描" class="headerlink" title="一趟扫描"></a>一趟扫描</h3><p>这个方法有点厉害了，最早是在上数据结构课上听老师讲的，觉得这种思路挺优秀的。<br>这里我们用到两个指针，都初始化指向头结点。让第一个指针先走n步，然后两个指针一起走，当第一个指针走到<br>链表的末尾时，第二个指针恰好走到删除节点的前一个节点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    def removeNthFromEnd(self, head, n):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        </span><br><span class="line">        left, right = head, head</span><br><span class="line">        count = 0</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> right.next:</span><br><span class="line">            <span class="keyword">if</span> count &lt; n:</span><br><span class="line">                pass</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = left.next</span><br><span class="line">            right = right.next</span><br><span class="line">            count += 1</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (count+1) == n:</span><br><span class="line">            <span class="built_in">return</span> head.next</span><br><span class="line">            </span><br><span class="line">        left.next = left.next.next</span><br><span class="line">        <span class="built_in">return</span> head</span><br></pre></td></tr></table></figure><p>我这里也是考虑了两种情况，和上面说的一样，将头结点拿出来单独考虑。</p><h3 id="其他的方法"><a href="#其他的方法" class="headerlink" title="其他的方法"></a>其他的方法</h3><p>我现在在学python嘛，然后写完题目会看看其他人的答案。解决的方法真的是多种多样的。<br>我印象很深的一个方法，是一次遍历，将链表的值存入一个列表中，然后利用列表的pop(-n)<br>弹出需要删除的那个数，真的是秀到我了，虽然说有点投机取巧的意味，因为题目最后是要求<br>返回头结点嘛，但是他输出结果是个列表。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;【leetcode-19】-删除链表的倒数第N个节点&quot;&gt;&lt;a href=&quot;#【leetcode-19】-删除链表的倒数第N个节点&quot; class=&quot;headerlink&quot; title=&quot;【leetcode 19】 删除链表的倒数第N个节点&quot;&gt;&lt;/a&gt;【leetcode 19】 删除链表的倒数第N个节点&lt;/h2&gt;&lt;p&gt;给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/13/hello-world/"/>
    <id>http://yoursite.com/2018/11/13/hello-world/</id>
    <published>2018-11-13T03:43:13.510Z</published>
    <updated>2018-11-13T03:43:13.510Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
